import schedule
import time
import sys
import os
from datetime import datetime

# Projekt gy√∂k√©r k√∂nyvt√°r hozz√°ad√°sa a sys.path-hoz
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from scraper.news_scraper import NewsScraper
from ai.processor import AIProcessor
from ai.tts import TTSGenerator
from automation.cleanup import cleanup_old_data

class AutomationScheduler:
    def __init__(self):
        self.scraper = NewsScraper()
        self.ai_processor = AIProcessor()
        self.tts_generator = TTSGenerator()
        self.is_running = False
        
    def run_news_scraping(self):
        """H√≠rgy≈±jt√©s futtat√°sa"""
        print(f"\nüïê {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - H√≠rgy≈±jt√©s ind√≠t√°sa")
        try:
            new_articles = self.scraper.scrape_all_sources()
            print(f"‚úÖ H√≠rgy≈±jt√©s befejezve: {new_articles} √∫j cikk")
        except Exception as e:
            print(f"‚ùå H√≠rgy≈±jt√©si hiba: {str(e)}")
    
    def run_ai_processing(self):
        """AI feldolgoz√°s futtat√°sa"""
        print(f"\nü§ñ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - AI feldolgoz√°s ind√≠t√°sa")
        try:
            processed = self.ai_processor.process_unprocessed_articles()
            print(f"‚úÖ AI feldolgoz√°s befejezve: {processed} cikk")
        except Exception as e:
            print(f"‚ùå AI feldolgoz√°si hiba: {str(e)}")
    
    def run_tts_generation(self):
        """TTS gener√°l√°s futtat√°sa"""
        print(f"\nüéµ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - TTS gener√°l√°s ind√≠t√°sa")
        try:
            generated = self.tts_generator.generate_audio_for_unprocessed()
            print(f"‚úÖ TTS gener√°l√°s befejezve: {generated} hangf√°jl")
        except Exception as e:
            print(f"‚ùå TTS gener√°l√°si hiba: {str(e)}")
    
    def run_cleanup(self):
        """Takar√≠t√°s futtat√°sa"""
        print(f"\nüóëÔ∏è {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - Cleanup ind√≠t√°sa")
        try:
            cleanup_old_data()
            print("‚úÖ Cleanup befejezve")
        except Exception as e:
            print(f"‚ùå Cleanup hiba: {str(e)}")
    
    def run_full_pipeline(self):
        """Teljes pipeline futtat√°sa (scraping -> AI -> TTS)"""
        print(f"\nüöÄ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - Teljes pipeline ind√≠t√°sa")
        
        # 1. H√≠rgy≈±jt√©s
        self.run_news_scraping()
        time.sleep(30)  # 30 sec sz√ºnet
        
        # 2. AI feldolgoz√°s
        self.run_ai_processing()
        time.sleep(30)  # 30 sec sz√ºnet
        
        # 3. TTS gener√°l√°s
        self.run_tts_generation()
        
        print("üéâ Teljes pipeline befejezve!")
    
    def setup_schedules(self):
        """√útemez√©sek be√°ll√≠t√°sa"""
        
        # ========== PRODUCTION SCHEDULE ==========
        
        # Teljes pipeline √≥r√°nk√©nt (f≈ë folyamat)
        schedule.every().hour.at(":05").do(self.run_full_pipeline)
        
        # Gyors h√≠rgy≈±jt√©s 30 percenk√©nt (breaking news-hez)
        schedule.every(30).minutes.do(self.run_news_scraping)
        
        # AI feldolgoz√°s 20 percenk√©nt (ha van feldolgozatlan)
        schedule.every(20).minutes.do(self.run_ai_processing)
        
        # TTS gener√°l√°s 15 percenk√©nt (ha van √∫j AI cikk)
        schedule.every(15).minutes.do(self.run_tts_generation)
        
        # Napi cleanup hajnali 3-kor
        schedule.every().day.at("03:00").do(self.run_cleanup)
        
        # ========== ALTERNAT√çV: EGYSZER≈∞BB SCHEDULE ==========
        # Ha t√∫l gyakori lenne, haszn√°ld ezt:
        
        # # Teljes pipeline 2 √≥r√°nk√©nt
        # schedule.every(2).hours.do(self.run_full_pipeline)
        
        # # Napi cleanup hajnali 3-kor
        # schedule.every().day.at("03:00").do(self.run_cleanup)
        
        print("üìÖ √útemez√©sek be√°ll√≠tva:")
        print("   - Teljes pipeline: √≥r√°nk√©nt")
        print("   - H√≠rgy≈±jt√©s: 30 percenk√©nt")
        print("   - AI feldolgoz√°s: 20 percenk√©nt") 
        print("   - TTS gener√°l√°s: 15 percenk√©nt")
        print("   - Cleanup: naponta hajnali 3-kor")
    
    def start(self):
        """Scheduler ind√≠t√°sa"""
        if self.is_running:
            print("‚ö†Ô∏è Scheduler m√°r fut!")
            return
        
        self.is_running = True
        self.setup_schedules()
        
        print("üöÄ H√≠rMagnet Automation Scheduler elind√≠tva!")
        print("Press Ctrl+C to stop...")
        
        # Azonnal futtatunk egyet ind√≠t√°skor
        print("\nüé¨ Ind√≠t√°si pipeline futtat√°sa...")
        self.run_full_pipeline()
        
        # F≈ë ciklus
        try:
            while self.is_running:
                schedule.run_pending()
                time.sleep(60)  # Ellen≈ërz√©s percenk√©nt
                
        except KeyboardInterrupt:
            print("\n\nüõë Scheduler le√°ll√≠t√°sa...")
            self.is_running = False
        except Exception as e:
            print(f"\n‚ùå Scheduler hiba: {str(e)}")
            self.is_running = False
    
    def stop(self):
        """Scheduler le√°ll√≠t√°sa"""
        self.is_running = False
        print("üõë Scheduler le√°ll√≠tva")

def main():
    """F≈ë bel√©p√©si pont"""
    scheduler = AutomationScheduler()
    scheduler.start()

if __name__ == "__main__":
    main()